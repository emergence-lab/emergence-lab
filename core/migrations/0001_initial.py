# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-14 19:31
from __future__ import unicode_literals

import autoslug.fields
import core.models.fields
import core.models.mixins
import core.models.process
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('status_changed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='status changed')),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username.', 'invalid')], verbose_name='username')),
                ('full_name', models.CharField(blank=True, max_length=255, verbose_name='full name')),
                ('short_name', models.CharField(blank=True, max_length=50, verbose_name='preferred name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_users', related_query_name='custom_user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('content_type', models.CharField(blank=True, choices=[('', 'Unknown'), ('application/octet-stream', 'Binary File'), ('application/pdf', 'PDF File'), ('application/vnd.ms-excel', 'Excel File'), ('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'Excel File'), ('image/png', 'PNG Image'), ('image/bmp', 'BMP Image'), ('image/jpeg', 'JPEG Image'), ('image/tiff', 'TIFF Image'), ('image/gif', 'GIF Image'), ('text/plain', 'Plaintext File'), ('text/csv', 'CSV File')], default='', max_length=200)),
                ('data', models.FileField(blank=True, max_length=200, null=True, upload_to=core.models.process.get_file_path)),
                ('state', models.CharField(choices=[('raw', 'Raw'), ('cleaned', 'Cleaned'), ('extracted', 'Extracted'), ('analyzed', 'Analyzed'), ('other', 'Other')], default='raw', max_length=20)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.datafile_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalProcess',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='date created')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='date modified')),
                ('uuid_full', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('legacy_identifier', models.SlugField(max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical process',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSample',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='date created')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='date modified')),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical sample',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Investigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('status_changed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='status changed')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=45, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name', verbose_name='slug')),
                ('description', core.models.fields.RichTextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'investigation',
                'verbose_name_plural': 'investigations',
            },
            bases=(core.models.mixins.AccessControlShortcutMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('status_changed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='status changed')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('due_date', models.DateField()),
                ('name', models.CharField(max_length=45, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name', verbose_name='slug')),
                ('description', core.models.fields.RichTextField(blank=True, verbose_name='description')),
                ('investigation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='milestones', related_query_name='milestone', to='core.Investigation')),
            ],
            options={
                'verbose_name': 'milestone',
                'verbose_name_plural': 'milestones',
            },
            bases=(core.models.mixins.AccessControlShortcutMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MilestoneNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('note', core.models.fields.RichTextField(blank=True, verbose_name='note')),
                ('milestone', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='note', related_query_name='note', to='core.Milestone')),
            ],
            options={
                'abstract': False,
            },
            bases=(core.models.mixins.AccessControlShortcutMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('uuid_full', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('legacy_identifier', models.SlugField(max_length=100)),
                ('investigations', models.ManyToManyField(related_name='processes', related_query_name='process', to='core.Investigation')),
                ('milestones', models.ManyToManyField(related_name='processes', related_query_name='milestone', to='core.Milestone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessCategory',
            fields=[
                ('slug', models.SlugField(default='uncategorized', max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('uuid_full', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('piece', models.CharField(max_length=5)),
                ('number', models.IntegerField(default=1)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.ProcessNode')),
                ('process', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Process')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(blank=True, max_length=50)),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', related_query_name='templates', to='core.Process')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessType',
            fields=[
                ('type', models.SlugField(default='generic-process', max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('full_name', models.CharField(max_length=255)),
                ('is_destructive', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('scheduling_type', models.CharField(choices=[('none', 'None'), ('simple', 'Simple'), ('full', 'Full'), ('external', 'External')], default='none', max_length=10)),
                ('creation_type', models.CharField(choices=[('default', 'Default'), ('custom', 'Custom')], default='default', max_length=10)),
                ('category', models.ForeignKey(default='uncategorized', on_delete=django.db.models.deletion.CASCADE, related_name='processtypes', related_query_name='processtype', to='core.ProcessCategory')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('status_changed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='status changed')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(max_length=45, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name', verbose_name='slug')),
                ('description', core.models.fields.RichTextField(blank=True, verbose_name='description')),
                ('member_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='auth.Group', verbose_name='member_group')),
                ('owner_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='auth.Group', verbose_name='owner_group')),
                ('viewer_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='auth.Group', verbose_name='viewer_group')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
            bases=(core.models.mixins.AccessControlShortcutMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProjectTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('process_tree', mptt.fields.TreeOneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ProcessNode')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Substrate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('comment', core.models.fields.RichTextField(blank=True)),
                ('source', models.CharField(blank=True, max_length=100)),
                ('serial', models.CharField(blank=True, max_length=25)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.substrate_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('status_changed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='status changed')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('description', core.models.fields.RichTextField(blank=True, verbose_name='description')),
                ('due_date', models.DateField()),
                ('milestone', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task', related_query_name='task', to='core.Milestone')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(core.models.mixins.AccessControlShortcutMixin, models.Model),
        ),
        migrations.AddField(
            model_name='sample',
            name='substrate',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Substrate'),
        ),
        migrations.AddField(
            model_name='process',
            name='type',
            field=models.ForeignKey(default='generic-process', on_delete=django.db.models.deletion.CASCADE, to='core.ProcessType'),
        ),
        migrations.AddField(
            model_name='process',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='investigation',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='investigations', related_query_name='investigation', to='core.Project', verbose_name='project'),
        ),
        migrations.AddField(
            model_name='historicalsample',
            name='process_tree',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ProcessNode'),
        ),
        migrations.AddField(
            model_name='historicalsample',
            name='substrate',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Substrate'),
        ),
        migrations.AddField(
            model_name='historicalprocess',
            name='type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ProcessType'),
        ),
        migrations.AddField(
            model_name='historicalprocess',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='datafile',
            name='process',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='datafiles', related_query_name='datafiles', to='core.Process'),
        ),
        migrations.AddField(
            model_name='user',
            name='projects',
            field=models.ManyToManyField(blank=True, help_text='Projects this user is tracking', related_name='users', related_query_name='user', through='core.ProjectTracking', to='core.Project', verbose_name='tracked projects'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_users', related_query_name='custom_user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
